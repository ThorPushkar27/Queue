// Time Complexity = O(n)
//Space Complexity= O(n)

vector<long long> printFirstNegativeInteger(long long int A[],long long int N, long long int K) {
    deque<long long int> dq;
    vector<long long>ans;
    for(int i =0; i<K; i++){
        if(A[i]<0){
            dq.push_back(i); // storing index in the queue.
        }
        
    }
    //store ans of first k size window.
    if(dq.size()>0){
        ans.push_back(A[dq.front()]);
    }
    else{
        ans.push_back(0);
    }
    //Process for different windows.
    for(int i=K; i<N; i++){
        //Removal
        if(dq.empty()==false && i- dq.front()>=K){
            dq.pop_front();
        }
        //Addition into the queue.
        if(A[i]<0){
            dq.push_back(i);
        }
        //ans store.
        if(dq.size()>0){
        ans.push_back(A[dq.front()]);
        }
        else{
            ans.push_back(0);
        }
    }
    return ans;
                                             
                                                 
                                                 
 }
