// Time Complexity = O(n2)
// Learnt - Circular cheezo ko kaise deal karte hain.


class Solution {
public:
    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {
        int n = gas.size();
        int m = cost.size();
        
        
        
        for(int i =0;i<n;i++){
            int j=i;
            int count=0;
            int petrol=0;
            while(count<n){
                petrol+=gas[j%n]-cost[j%n];  // Since we are going to circle...I mean backward so %
                if(petrol<0){
                    break;
                }
                count++;
                j++;
            }
            if(count==n){
                return i;
            }
            
        }
        return -1;
        
    }
};


//Time Complexity = O(n)
//Greedy approach


class Solution {
public:
    int canCompleteCircuit(vector<int>& gas, vector<int>& cost) {
        int tank=0;
        int index=0;
        int total=0;
        int n = gas.size();
        for(int i =0; i<n; i++){
            int consume = gas[i]-cost[i];
            tank+=consume;
            if(tank<0){
                index=i+1;
                tank=0;
            }
            total+=consume;
        }
        if(total<0) return -1;
        else{
            return index;
        }
    }
};
